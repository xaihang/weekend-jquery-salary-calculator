TODO: SETUP/GITHUB STUFF;
    - name repo: weekend-jquery-salary-calculator
    - commit regularity!


FINAL GOAL: 
    1. records employees' information with ability to add / delete button and/or input
    2. calculate monthly employees salary 

TODO: FORM <form>;
    a. have an input to collect employee's:
        _ firstName
        _ lastName 
        _ idNumber 
        _ jobTitle
        _ annualSalary

    b. have button, type="submit" that:
        - collect employee's inputs
        - store the employee's inputs to calculate monthly costs ( eg. val() )
        - append information to the DOM ( eg. append() )
        - clear the input fields ( eg. empty() )

    c. calculate monthly cost 
        - Using the stored information: calculate monthly costs 
        - and append 'this' (TotalMonthlyCost) to the to DOM.
             * IF the total monthly cost exceeds $20,000 == 'append' a red background color to the TotalMonthlyCost

    d. add DELETE button; (For Base mode, it does **not** need to remove that Employee's salary from the reported total.)
        - removes an employee from the DOM
        - once employee is removed their annualSalary too should be REMOVE from the TotalMonthlyCost

    e. STRETCH GOAL: Add styling or extra functionality that fits with the theme of this assignment.
        - DELETE button: 
            * update the _ TotalMonthlyCost _ section on the page to reflect the employee's removal.
                (_HINT:_ You will need to figure out which employee was removed, in order to subtract their salary from the total. 
                         Consider using `.text()` as a getter, or look into jQuery's `.data()` function. This is tricky! )



.data()
-used to attach data to elements on a webpage. This data can then be accessed and manipulated later on. It is a way to store information on the element, so you can later access it.
-You can use .data() to store any type of value, such as a string, number, object, or array. 
**It can be tricky because if you use .data() to store data on an element, that data is only accessible within the context of your JavaScript code, and not directly in the HTML or CSS. Therefore, 
it is important to make sure that you document what data you are storing on an element, and how you are using it, so that other developers can understand how the code is working. 
Additionally, it's important to be careful when using .data() to store data on elements that might be deleted or replaced later on, as this can cause memory leaks if the data is not properly cleaned up.

